<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Solr | FJZhou Notepad Online]]></title>
  <link href="http://fjzhou.github.io/blog/categories/solr/atom.xml" rel="self"/>
  <link href="http://fjzhou.github.io/"/>
  <updated>2018-05-14T09:38:04+08:00</updated>
  <id>http://fjzhou.github.io/</id>
  <author>
    <name><![CDATA[FJZhou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[配置双机SolrCloud]]></title>
    <link href="http://fjzhou.github.io/blog/2014/01/04/solrcloud-config/"/>
    <updated>2014-01-04T00:00:00+08:00</updated>
    <id>http://fjzhou.github.io/blog/2014/01/04/solrcloud-config</id>
    <content type="html"><![CDATA[<ol>
<li>物理环境：两台服务器，CentOS，分别是10.0.2.4和10.0.2.6。已经安装了Jetty和Solr。</li>
<li>下载安装ZooKeeper到/usr/local/zookeeper。</li>
<li>复制/usr/local/zookeeper/conf/zoo_example.cfg为zoo.cfg，修改其中的dataDir，默认是临时目录。启动ZooKeeper.</li>
<li>因为默认会使用第一个网卡的地址为基地址，如果Solr使用的网卡不是第一块网卡，则需要修改/usr/local/solr/example/solr/solr.xml。
根据环境这里修改其中的&lt;SolrCloud&gt;中的host为<code>${host:10.0.2.4}</code>。</li>
<li>然后修改其中一台jetty中的start.ini。加入以下参数：</li>
</ol>


<pre><code class="bash"># 定义分片的个数
-DnumShards=2
# 因为是Jetty方式部署，所以不是默认的端口
-Djetty.port=8080
# 配置路径
-Dbootstrap_confdir=/usr/local/solr/example/solr/collection1/conf
# 配置名称
-Dcollection.configName=myconf
# ZooKeeper连接
-DzkHost=10.0.2.4:2181
</code></pre>

<ol>
<li>上面这是第一个节点的配置，其他Node的配置简单的多：</li>
</ol>


<pre><code class="bash">-Djetty.port=8080
-DzkHost=10.0.2.4:2181
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Jetty环境配置Solr和中文分词]]></title>
    <link href="http://fjzhou.github.io/blog/2013/12/26/solr-config/"/>
    <updated>2013-12-26T00:00:00+08:00</updated>
    <id>http://fjzhou.github.io/blog/2013/12/26/solr-config</id>
    <content type="html"><![CDATA[<ol>
<li>Java环境</li>
<li>下载、解压缩Solr和Jetty。假设路径是<code>/usr/local/jetty</code>和<code>/usr/local/solr</code></li>
<li>此时可以直接 <code>java -jar /usr/local/solr/example/start.jar</code>运行嵌入的简约版Jetty进行测试</li>
<li>复制<code>/usr/local/solr/example/lib/ext</code>里的jar到<code>/usr/local/jetty/lib/ext</code></li>
<li>复制<code>/usr/local/solr/example/webapps/solr.war</code>到<code>/usr/local/jetty/webapps</code>（可以解压缩，低版本Jetty上不解压缩有可能有奇葩bug)</li>
<li>在Jetty的start.ini中增加 <code>-Dsolr.solr.home=/usr/local/solr/example/solr</code></li>
<li>执行 <code>java -jar /usr/local/jetty/start.jar</code></li>
</ol>


<h3>IKAnalyzer中文分词的配置</h3>

<ol>
<li>这里下载支持Solr4.0的2012版，因为Solr4开始改变了一部分接口，所以2012以前的有点兼容性问题</li>
<li>复制IKAnalyzer.jar和stopword.dic到<code>/usr/local/solr/example/solr/lib</code></li>
<li><code>/usr/local/solr/example/solr/collection1/conf/solrconfig.xml</code>中增加:</li>
</ol>


<pre><code class="xml">&lt;lib path="/usr/local/solr/example/solr/lib/IKAnalyzer.jar" /&gt;
</code></pre>

<ol>
<li>然后可以在<code>Schema.xml</code>中使用了：</li>
</ol>


<pre><code class="xml">&lt;fieldType name="text_ik" class="solr.TextField"&gt;
    &lt;analyzer type="index" class="org.wltea.analyzer.lucene.IKAnalyzer" isMaxWordLength="false" /&gt;
    &lt;analyzer type="query" class="org.wltea.analyzer.lucene.IKAnalyzer" isMaxWordLength="true" /&gt;
&lt;/fieldType&gt;
</code></pre>
]]></content>
  </entry>
  
</feed>
