<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[FJZhou Notepad Online]]></title>
  <link href="http://fjzhou.github.io/atom.xml" rel="self"/>
  <link href="http://fjzhou.github.io/"/>
  <updated>2020-02-24T13:12:18+08:00</updated>
  <id>http://fjzhou.github.io/</id>
  <author>
    <name><![CDATA[FJZhou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[输入网址后发生了什么]]></title>
    <link href="http://fjzhou.github.io/blog/2017/03/18/what-happen-browser/"/>
    <updated>2017-03-18T11:00:00+08:00</updated>
    <id>http://fjzhou.github.io/blog/2017/03/18/what-happen-browser</id>
    <content type="html"><![CDATA[<blockquote><p>一个经典的面试题：你输入网址后到页面显示出来，中间发生了什么？</p></blockquote>

<!--more-->


<h2>物理</h2>

<p>先扯个淡。输入网址的时候当然首先动作的是键盘。如果是外接USB键盘，则是键盘读取按键信号，然后传递给操作系统。如果是触摸屏，则有操作系统负责识别触摸区域，得到按键信息。</p>

<h2>操作系统</h2>

<p>用户端常见的操作系统包括：微软的Windows、苹果的macOS、开源的Linux、Google的Android、苹果的iOS等。</p>

<p>操作系统负责管理所有硬件，提供程序执行环境，为上层程序提供基本的输入输出等功能。除了这些基本功能外（一般叫做操作系统内核），系统还会提供一些基础设施。比如网络Socket API，图形图像功能等。这些功能都是浏览器所需要的。</p>

<p>浏览器作为一个程序，从操作系统处得到用户输入的网址和输入完成的命令。后续的所有功能都需要调用操作系统对应的API来实现。</p>

<h2>浏览器</h2>

<p>常见的浏览器软件包括：</p>

<ul>
<li>Google的Chrome。Webkit内核（新版转向Blink）和V8 JS引擎</li>
<li>微软的IE。Trident内核，IE 11之后不再更新。</li>
<li>微软的Edge。EdgeHTML内核，Chakra JS引擎。</li>
<li>Mozilla的Firefox。Gecko内核和SpiderMonkey JS引擎。</li>
<li>苹果的Safari。Webkit内核，Nitro JS引擎。</li>
<li>Opera。原Presto，新版也转向Blink和V8。</li>
</ul>


<p>浏览器接收到网址后，开始以下的流程。</p>

<h2>DNS</h2>

<p>首先浏览器需要联系网站服务器。网址，即URL，被解析为若干部分。例如对于<code>www.baidu.com</code>，实际上它的完整形式是：<code>http://www.baidu.com:80/</code>。其中包括了以下部分：</p>

<ul>
<li>协议：http</li>
<li>域名：www.baidu.com。其中<code>baidu.com</code>是百度的域名，www是这个域名下的二级域名。</li>
<li>端口：80</li>
<li>路径：/</li>
</ul>


<p>其中协议部分默认为http，端口对于http来说默认是80，对于https来说是443。接下来如果域名部分不是IP的话，需要DNS协议得到服务器的IP地址。</p>

<p>DNS本身是一个基于UDP协议的网络协议。专门用于服务器和IP地址的查询。DNS服务由DNS服务器提供，默认端口是UDP的53。一个计算机的DNS服务器配置在操作系统中，是上网配置的基本元素之一（另外几个包括IP地址，子网掩码，默认网关）。</p>

<p>浏览器把域名发送给系统默认DNS服务器。如果该服务器本地有缓存，且缓存未过期，则直接返回结果。否则向上一级DNS服务器查询，直到DNS根服务器。DNS协议最终会返回A记录(IPv4)或者AAAA记录(IPv6)或者Alias(别名)等。如果DNS失败，浏览器会提示域名找不到或者DNS错误。</p>

<p>到此为止，浏览器知道了网址的对应服务器IP地址和端口，然后就通过TCP协议发起网络请求。但是发起的是什么请求取决于网址的协议是HTTP还是HTTPS。</p>

<h2>HTTP</h2>

<p>HTTP是基于文本的协议，客户端和服务器一问一答，有固定格式。包括HTTP Header和Boby。头部使用换行符进行分隔字段，一行一个字段。字段中使用冒号<code>:</code>分隔Key和Value。例如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>GET / HTTP/1.1
</span><span class='line'>Host: www.baidu.com
</span><span class='line'>Connection: keep-alive
</span><span class='line'>Cache-Control: max-age=0
</span><span class='line'>Upgrade-Insecure-Requests: 1
</span><span class='line'>User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.14 Safari/537.36
</span><span class='line'>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
</span><span class='line'>DNT: 1
</span><span class='line'>Accept-Encoding: gzip, deflate, sdch, br
</span><span class='line'>Accept-Language: zh-CN,zh;q=0.8,en;q=0.6,zh-TW;q=0.4
</span><span class='line'>Cookie: BAIDUID=F27F5856EB13162499CC2DB7DC4FD050:FG=1;</span></code></pre></td></tr></table></div></figure>


<p>最重要是开始的几行:</p>

<ul>
<li>GET / HTTP/1.1：使用GET动作（另外还有POST，PUT等），获得<code>/</code>路径的内容（还记得网址里最后的<code>/</code>么），采用<code>HTTP/1.1</code>协议</li>
<li>Host: www.baidu.com：主机头为www.baidu.com。</li>
<li>Connection: keep-alive：结束后保持网络连接，以节省TCP建立的开销。</li>
<li>User-Agent：报告浏览器参数。</li>
<li>Accept：浏览器能接受的应答格式。</li>
</ul>


<p>这是百度服务器返回的Response Header。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>HTTP/1.1 200 OK
</span><span class='line'>Server: bfe/1.0.8.18
</span><span class='line'>Date: Mon, 13 Mar 2017 12:23:41 GMT
</span><span class='line'>Content-Type: text/html;charset=utf-8
</span><span class='line'>Transfer-Encoding: chunked
</span><span class='line'>Connection: keep-alive
</span><span class='line'>Cache-Control: private
</span><span class='line'>Expires: Mon, 13 Mar 2017 12:23:41 GMT
</span><span class='line'>Content-Encoding: gzip</span></code></pre></td></tr></table></div></figure>


<p>应答的主要字段：</p>

<ul>
<li>HTTP/1.1 200 OK：<code>HTTP/1.1</code>协议，返回代码200，含义为请求成功完成</li>
<li>Server：百度服务器信息</li>
<li>Date：时间</li>
<li>Content-Type：应答的格式和编码。这是和浏览器请求对应的。</li>
<li>Expires: 过期时间，在这个时间之前的话应答不会过期，允许浏览器进行本地缓存。</li>
</ul>


<h2>HTTPS</h2>

<p>HTTPS协议是在HTTP协议之下的加密层。客户端和服务器建立起一个加密通道后进行数据传输。传输的数据仍然是HTTP文本。一旦部署了HTTPS，那么数据就不再是明码，可以防止数据在传输过程中的泄露。另外，SSL证书颁发机构在颁发EV证书的时候，会严格验证机构身份，可以在一定程度上避免钓鱼网站。</p>

<blockquote><p>SSL证书分为DV，OV和EV三种。DV仅验证域名所有者，EV会验证机构身份。因此数据安全要求较高的网站，例如金融机构，一般都申请EV证书。访问的时候浏览器地址栏会出现绿色机构名称。
<img src="http://upload-images.jianshu.io/upload_images/1456355-d8a296d4559f739d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="工行网银" /></p></blockquote>

<p>部署正确的HTTPS Web服务器中有一个经过权威认证的数字证书。数字证书包含有服务器公钥和签名算法。浏览器和服务器通过非对称加密算法公私钥机制进行通信，协商出一个双方都支持的对称加密算法和加密的秘钥。</p>

<p>数字证书由一个叫做CA（Certification Authority）的机构颁发，包含由服务器公钥，订阅人相关信息(名称，域名等)，最后由颁发者使用自己的证书进行签名。CA的机构证书由另一个CA签名，直至最后一种特殊的证书为止：自己给自己签名。这种证书叫做根证书，预先内置在操作系统或者浏览器中。由此数字证书形成一个证书链。</p>

<p><img src="http://upload-images.jianshu.io/upload_images/1456355-195c27beb0790e04.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="百度数字证书" /></p>

<p>其中<code>baidu.com</code>证书负责百度域名下的HTTPS运作，此证书由一张<code>GlobalSign Organization Validation CA</code>的中间证书签名，而这张中间证书由<code>GlobalSign Root CA</code>即根证书颁发。</p>

<p>不由根证书直接签发是因为安全原因。因为根证书一般都内置于系统，更新这个列表是很慢的。而系统只验证CA是否可信任，只要受信任，它可以签发任何域名的证书。因此根证书私钥一旦泄露或发生其他问题造成证书不安全，后果就很严重。结果是根证书私钥一般存放在和银行金库一样安全的地方，不可能经常拿出来为客户签名。一般由根证书签发一些中间证书，平时由中间证书来签发终端证书，一旦出问题，可以直接吊销这张中间证书。</p>

<p>SSL证书的作用是构建一个可信任的加密数据通道，在网络中不止可在HTTP中使用。比如和FTP搭配使用就是FTPS。</p>

<h2>网络接入</h2>

<p>其实DNS也是需要通过网络的。但是网络放到现在来说吧。</p>

<p>接下来，数据需要通过网络发送出去。网络分为电信、移动、联通宽带和手机网络。以下是网络层的模型:</p>

<p><img src="http://upload-images.jianshu.io/upload_images/1456355-2ac5b9c6103b9e56.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="网络模型" /></p>

<p>不同的接入方式在物理层和网络链路层是不同的，但是到了IP层就都统一了。</p>

<ul>
<li>有线宽带</li>
</ul>


<p>电脑通过水晶头（RJ45）连接网线（双绞线），后连接到网络设备上（HUB、路由器、交换机等）。这是以太网的接入方式。</p>

<ul>
<li>无线宽带</li>
</ul>


<p>设备通过天线与接入点（Access Point，AP）通信，然后AP接入网络。AP后端一般通过以太网有线方式接入网络。即无线仅作为设备和网络末端的链接方式。</p>

<p>通信协议的事实标准是802.11家族，例如802.11g，802.11n，802.11ac等。</p>

<ul>
<li>手机</li>
</ul>


<p>设备通过天线与基站通信，然后基站接入网络。这是最复杂的一种方式，电信运营商的天线、基站、协议等的标准浩如烟海。目前还在运营的接入标准包括：GSM，CDMA，WCDMA，TDSCDMA，CDMA2000，TD-LTE，FDD-LTE等。</p>

<h2>运营商</h2>

<p>网络通过末端进入运营商网络之后，需要通过一整套设备和规则进行数据传递。主要网络设备就是路由器和交换机。</p>

<p>多台设备通过交换机组成一个子网。子网之间通过路由器连接。路由器在内部维护了一张路由表，当有数据包到达时，查询路由表，决定数据包通过哪一个网卡，传输到下一个子网去。无数个路由器相互连接，把数据包传输到最终节点。这部分内容资料最多是Cisco认证相关教材和产品说明。</p>

<ul>
<li>海底光缆</li>
</ul>


<p>这是属于物理层的内容，属于运营商重要的组成部分。网络信号最终需要线缆通信，目前主流的大带宽通信手段就是光纤和光缆。而跨洲的通信就是通过海底光缆。若干年前，台湾地震，海底光缆故障，中断了大量的海外网络访问。图为中国海底光缆分布：</p>

<p><img src="http://upload-images.jianshu.io/upload_images/1456355-c3a30a3c8c07387a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="中国海底光缆" /></p>

<h2>机房</h2>

<p>最终数据到达网站所在机房。</p>

<p>网站在机房一般会有多台服务器，通过交换机互相连接后通过路由器作为网关接入运营商。数据到达网关后会被进行过滤和处理，通过防火墙、入侵检测等网络安全方面的设备，然后通过负载均衡等设备，最终达到目标服务器。</p>

<p><img src="http://upload-images.jianshu.io/upload_images/1456355-c17ecf855df08efc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="凌乱的机房" /></p>

<h2>服务器操作系统</h2>

<p>与用户端一样，服务器也需要通过操作系统运行网站相关软件。不同的是服务器的操作系统是为长时间稳定高效运行特别优化过的。常见的服务器操作系统包括：Linux，Unix家族（FreeBSD，Solaris等），Windows Server（2003,2008,2012,2016）。</p>

<h2>Web服务器软件</h2>

<p>终于到达处理HTTP协议的软件了。这类软件叫做Web Server。主流的包括Windows系统上的IIS，开源的Apache，Nginx等。</p>

<ul>
<li>HTTP协议处理</li>
</ul>


<p>Web Server最重要的角色就是处理HTTP协议，给浏览器规范的应答。处理网络请求和相关连接。因此吞吐量和性能是一个重要的指标。开源软件中Nginx是高性能Web服务器的主流选择，IIS是Windows上的标准软件。</p>

<ul>
<li>HTTPS协议处理</li>
</ul>


<p>HTTPS协议相关的证书、加解密、签名等也需要Web服务器处理。但是开源软件中，一般选择调用<code>OpenSSL</code>处理，而IIS是微软自行实现的加密库。</p>

<ul>
<li>静态文件</li>
</ul>


<p>Web Server能够直接处理的只有静态文件。比如请求<code>http://upload.jianshu.io/admin_banners/web_images/2870/48782c3773b1132ee6c594e56211f64499669099.jpg</code>，那么Web服务器根据网址在服务器磁盘上找到这个路径的文件，返回文件内容。</p>

<ul>
<li>动态内容接口</li>
</ul>


<p>但是现在的网站除了css、js和图片等资源外，大量的内容都是动态内容。Web服务器需要一个标准接口与不同语言的代码配合，来动态生成网页内容。这个接口包括CGI、FastCGI、ISAPI等。其中ISAPI属于IIS，开源服务器一般支持CGI和FastCGI等。</p>

<h2>CDN和代理</h2>

<p>在进入动态内容之前，插入一段静态资源处理的现状。</p>

<p>一般来说，静态资源很少变化，而请求量很大。而通过前文可以知道用户和服务器之间有众多的网络设备和线路需要通过。为了加速静态资源（尤其是图片）的访问，服务器离用户越近越好。因此产生了CDN这个需求。</p>

<p>CDN即内容分发网络，通过在各地部署服务器，在服务器之间同步静态资源，然后就近提供给用户。从域名上就能看出简书用了CDN。比如Logo的网址：<code>http://cdn-qn0.jianshu.io/assets/web/logo-58fd04f6f0de908401aa561cda6a0688.png</code></p>

<h2>应用服务器</h2>

<p>请求到达应用服务器之后，就开始网站自己的活了。应用服务器通过CGI、FastCGI、ISAPI等接口与Web服务器通信，获得HTTP请求，返回HTTP应答。主流应用服务器根据语言和平台分：</p>

<ul>
<li>Windows和.NET：IIS。IIS放在这里是因为ASP.NET深度集成，无法分出。</li>
<li>Java：Jetty，JBoss，Tomcat，WebLogic等</li>
<li>PHP：php-cgi</li>
</ul>


<p>应用服务器可以作为dll运行在Web服务器中（比如IIS，但是IIS也支持FastCGI），或者作为独立进程，通过IPC与Web服务器通信。</p>

<p>接下来就是程序内部的事情了。省略。</p>

<h2>数据库服务器</h2>

<p>应用服务器在生成网站内容的过程中一般需要连接数据库存取数据。目前主流数据库包括：
* MySQL：开源软件，SUN公司被收购后由Oracle负责
* MariaDB：SUN被收购后，因为社区与Oracle的纠纷，从MySQL分支出来的版本。
* SQL Server：微软开发的商用数据库。其中Express  Edtion免费。
* Oracle：Oracle公司开发的商用数据库。
* PostgreSQL：开源软件，号称开源中功能最强。
* DB2：IBM公司开发的商用数据库。
* Redis: NoSQL，支持多种数据结构
* MongoDB: NoSQL</p>

<h2>HTML和CSS解析</h2>

<p>最终应用服务器生成了HTML，然后给Web Server。Web Server生成HTTP应答，然后通过复杂的网络线路回到用户电脑中。用户电脑的操作系统把应答给浏览器。浏览器开始渲染。</p>

<p>以下是浏览器渲染的主要过程：</p>

<p><img src="http://upload-images.jianshu.io/upload_images/1456355-8883dbd15f39cc18.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="渲染" /></p>

<p>开始从头到尾解析HTML，并生成DOM树。其中如果有外链资源，需要再次通过网络层以此下载。如果是<code>&lt;script&gt;</code>标签，则需要调用JS引擎执行脚本。如果是css，则开始解析CSS，得到一系列样式规则。DOM树生成之后，与样式规则拼接，得到渲染树。</p>

<p>渲染树经过排版引擎得到最终的渲染位置和样式，然后调用操作系统的绘图API绘制页面（部分内容会调用显卡进行硬件加速）。</p>

<h2>JavaScript引擎</h2>

<p>现代浏览器中JS部分越来越重要，因为前端中JS的比例越来越大。其中Google Chrome内置的V8引擎已经超越浏览器，在<code>node.js</code>、桌面开发等其他领域也应用广泛。比如我现在写这篇文章用的<code>Visual Studio Code</code>就内置V8引擎。</p>

<p>JS引擎负责解释并执行JS语言（现代浏览器一般内置JIT编译器以加速执行），并通过浏览器或者其他环境提供API给JS使用。浏览器中最重要的API就是DOM（Document Object Model）和BOM（Browser Object Model）。JS正是通过这些接口来操作HTML，并在此基础上获得动态页面的效果。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PostgreSQL安装配置记录]]></title>
    <link href="http://fjzhou.github.io/blog/2016/01/29/postgresql-install-log/"/>
    <updated>2016-01-29T13:35:00+08:00</updated>
    <id>http://fjzhou.github.io/blog/2016/01/29/postgresql-install-log</id>
    <content type="html"><![CDATA[<p>因为支持JSON等功能，转投PostgreSQL，目前在CentOS、OS X等上安装成功，记录一下配置过程。</p>

<h3>环境</h3>

<p>CentOS 7.2.1511 (Core)<br/>
Linux 3.10.0-327.el7<br/>
PostgreSQL版本：v9.5.0 <a href="https://ftp.postgresql.org/pub/source/v9.5.0/postgresql-9.5.0.tar.gz">下载</a></p>

<!--more-->


<h2>编译安装</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>yum install readline-devel zlib-devel libxml2-devel libxslt-devel
</span><span class='line'>./configure --prefix<span class="o">=</span>/usr/local/pgsql --with-libxml --with-libxslt
</span><span class='line'>make
</span><span class='line'>make install
</span></code></pre></td></tr></table></div></figure>


<h2>非必需步骤，安装扩展</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> 源代码目录/contrib
</span><span class='line'>make
</span><span class='line'>make install
</span></code></pre></td></tr></table></div></figure>


<p>安装之后登录到数据库，可安装扩展。比如加强<a href="http://pgadmin.org/">pgAdmin</a>工具的<code>CREATE EXTENSION adminpack</code>。</p>

<h2>安装完成后的操作</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 建立专门用户运行</span>
</span><span class='line'>adduser postgres
</span><span class='line'><span class="c"># 数据目录</span>
</span><span class='line'>mkdir /usr/local/pgsql/data
</span><span class='line'>chown -R postgres /usr/local/pgsql
</span><span class='line'>
</span><span class='line'><span class="c"># 切换</span>
</span><span class='line'>su - postgres
</span><span class='line'><span class="c"># 初始化</span>
</span><span class='line'>/usr/local/pgsql/bin/initdb -D /usr/local/pgsql/data
</span><span class='line'><span class="c"># 启动</span>
</span><span class='line'>pg_ctl start -l logfile
</span></code></pre></td></tr></table></div></figure>


<h2>配置文件</h2>

<ol>
<li>修改<code>/etc/profile</code>，添加<code>export PGDATA=/usr/local/pgsql/data</code>作为默认数据目录。</li>
<li>修改<code>/usr/local/pgsql/data/postgresql.conf</code>，增加<code>listen_addresses='*'</code>，修改监听IP。</li>
<li>修改<code>/usr/local/pgsql/data/pg_hba.conf</code>，增加<code>host all all 0.0.0.0/0 md5</code>，允许用户远程登录。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[升级Blog程序完成]]></title>
    <link href="http://fjzhou.github.io/blog/2015/12/05/update-blog/"/>
    <updated>2015-12-05T17:10:00+08:00</updated>
    <id>http://fjzhou.github.io/blog/2015/12/05/update-blog</id>
    <content type="html"><![CDATA[<p>原来使用Jekyll，UI自己修改。今天折腾了几个小时，升级到Octopress，基于Jekyll，但是好用许多。</p>

<p>用MWeb写Markdown，程序托管在Coding.net，生成后发布到Github。</p>

<hr />

<p>Feb-19-2016 更新：
内容也放Coding.net pages服务</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Macbook Pro With Retina入手记录]]></title>
    <link href="http://fjzhou.github.io/blog/2015/06/24/rmbp-record/"/>
    <updated>2015-06-24T00:00:00+08:00</updated>
    <id>http://fjzhou.github.io/blog/2015/06/24/rmbp-record</id>
    <content type="html"><![CDATA[<p>2015/6/9购买，2015/6/23快递到货。</p>

<p>2015Early Macbook Pro with Retina 13inch/256GB/16GB。2015/6/24下单Apple Care。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[屏蔽非法域名访问]]></title>
    <link href="http://fjzhou.github.io/blog/2015/02/15/block-illegal-domain/"/>
    <updated>2015-02-15T00:00:00+08:00</updated>
    <id>http://fjzhou.github.io/blog/2015/02/15/block-illegal-domain</id>
    <content type="html"><![CDATA[<h2>Nginx屏蔽非法域名访问</h2>

<p>一个具有中国特色攻击方式，随便申请一个域名，不备案，然后解析到要攻击的服务器IP地址上。然后你的域名被封的时候，有一定概率会连带这对方IP也被封掉。这里使用Nginx的配置文件来屏蔽没有配置过的域名访问。</p>

<!--more-->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>server {
</span><span class='line'>    listen 80 default_server;
</span><span class='line'>    server_name _;
</span><span class='line'>    location / {
</span><span class='line'>        proxy_pass http://block.htm;
</span><span class='line'>    }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>非法域名重定向到一个页面，上面用大字体写<code>此域名已关停</code>即可。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Software Engineering Code of Ethics and Professional Practice]]></title>
    <link href="http://fjzhou.github.io/blog/2014/10/31/professional-practice/"/>
    <updated>2014-10-31T00:00:00+08:00</updated>
    <id>http://fjzhou.github.io/blog/2014/10/31/professional-practice</id>
    <content type="html"><![CDATA[<h2>软件工程师职业道德规范和标准</h2>

<p><a href="http://www.acm.org/about/se-code">http://www.acm.org/about/se-code</a></p>

<!--more-->


<p><strong>原则1 公众</strong><br/>
软件工程师的行为应与公众利益一致。</p>

<p><strong>原则2 客户与雇主</strong><br/>
软件工程师应以其客户和雇主利益最大化的方式做事，与公众利益保持一致。</p>

<p><strong>原则3 产品</strong><br/>
软件工程师应当确保自己的产品以及相关的修改满足最高的专业标准。具体来说，软件工程师应当：</p>

<ol>
<li>力求高质量、可接受的成本和合理的计划；确保雇主和客户了解并统一你做的重要折衷，并让用户和公众也能了解这些折衷。</li>
<li>确保在开展或提议任何项目时，设定恰当、可行的目标。</li>
<li>识别、定义和解决各种与项目相关的道德、经济、文化、法律和环境。</li>
<li>确保自身有足够的资质去参加或准备参与相关项目，这里的资质由相应的教育、培训和经验组合而成。</li>
<li>确保在参与或准备参与的项目中采用得当的方法。</li>
<li>只要条件许可，就应当采取最合适的专业标准去完成手头的任务，除非有道德或者技术上的正当理由来支持你不这么做。</li>
<li>力求完全理解参与开发的软件的规格要求。</li>
<li>确保软件的规则说明书是完善的、满足用户需求的，也经过了恰当的批准流程。</li>
<li>对于任何正在或计划进行的项目，要在费用、进度、人员、质量和产出上进行合乎实际和量化的评估，而且要说明评估的不确定性。</li>
<li>确保项目的程序和文档经过足够的测试、调试和复审。</li>
<li>确保项目文档齐全，包括所有发现的问题和解决的方法。</li>
<li>致力于开发尊重用户隐私的软件和文档。</li>
<li>留心只用合乎道德和法律的手段去使用准确的数据，并且只按照被适当授权的方式去使用这些数据。</li>
<li>维护数据的完整性，注意过期和有问题的数据。</li>
<li>对于任何形式的软件维护工作，要具备同开发新软件时一样的专业精神。</li>
</ol>


<p><strong>原则4 判断</strong><br/>
软件工程师应当具备完整且独立的专业判断。</p>

<p><strong>原则5 管理</strong><br/>
软件项目的经理和领导人应该提倡并亲自采用符合道德规范的方法来管理软件的开发和维护。</p>

<p><strong>原则6 职业</strong><br/>
在与公众利益一致的原则下，软件工程师应当保证其职业的诚信和声誉。</p>

<p><strong>原则7 同事</strong><br/>
软件工程师应当公平对待同侪，并予以支持和帮助。</p>

<p><strong>原则8 自身</strong><br/>
软件工程师应当终生学习以提高自身的专业水平，并在工作实践中推动落实道德准则。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTML5下使用JS访问设备姿态]]></title>
    <link href="http://fjzhou.github.io/blog/2014/09/09/html5-device-motion/"/>
    <updated>2014-09-09T00:00:00+08:00</updated>
    <id>http://fjzhou.github.io/blog/2014/09/09/html5-device-motion</id>
    <content type="html"><![CDATA[<p>手机和平板上拥有陀螺仪和加速计等很好玩的传感器。因此可以获得设备当前的运动加速度和姿态。</p>

<!--more-->


<p>首先为手机定义三维空间的参考轴：</p>

<p><img src="http://www.w3.org/TR/orientation-event/start.png" alt="XYZ轴定义" /></p>

<p>JS可以通过<a href="http://www.w3.org/TR/orientation-event/">标准事件</a>获得以下数据：</p>

<h2>加速度数据</h2>

<p>当设备运动时，会有加速度数据，单位是米/秒<sup>2</sup>。在X，Y，Z三个轴上x，y，z三个加速度分量。</p>

<p>当屏幕朝上，水平静止放置时，acceleration接口中x=0，y=0，z=0，而accelerationIncludingGravity接口中
x=0，y=0，z=9.81。即设备只受到垂直方向上的重力加速度。<br/>
PS: 在iOS下，此时z=-9.81。</p>

<p>加速度数据目前在手机上的一个小应用就是摇一摇。判断一个时间间隔内的设备位移，从而判定是否被摇动。代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;devicemotion&quot;</span><span class="p">,</span> <span class="nx">deviceMotionHandler</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">deviceMotionHandler</span><span class="p">(</span><span class="nx">eventData</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">SHAKE_THRESHOLD</span> <span class="o">=</span> <span class="mi">3000</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">acceleration</span> <span class="o">=</span> <span class="nx">eventData</span><span class="p">.</span><span class="nx">accelerationIncludingGravity</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">x</span> <span class="o">=</span> <span class="nx">acceleration</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">y</span> <span class="o">=</span> <span class="nx">acceleration</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">z</span> <span class="o">=</span> <span class="nx">acceleration</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">curTime</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">().</span><span class="nx">getTime</span><span class="p">();</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">diffTime</span> <span class="o">=</span> <span class="nx">curTime</span> <span class="o">-</span> <span class="nx">last_update</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">diffTime</span> <span class="o">&gt;</span> <span class="mi">100</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">last_update</span> <span class="o">=</span> <span class="nx">curTime</span><span class="p">;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">speed</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span> <span class="o">+</span> <span class="nx">z</span> <span class="o">-</span> <span class="nx">last_x</span> <span class="o">-</span> <span class="nx">last_y</span> <span class="o">-</span> <span class="nx">last_z</span><span class="p">)</span> <span class="o">/</span> <span class="nx">diffTime</span> <span class="o">*</span> <span class="mi">10000</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nx">speed</span> <span class="o">&gt;</span> <span class="nx">SHAKE_THRESHOLD</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 摇一摇</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 摇的不够</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nx">last_x</span> <span class="o">=</span> <span class="nx">x</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">last_y</span> <span class="o">=</span> <span class="nx">y</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">last_z</span> <span class="o">=</span> <span class="nx">z</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>旋转数据</h2>

<p>设备在空间中的姿态数据根据陀螺仪传感器获得。设备以X，Y，Z三个轴为轴旋转，分别获得alpha，beta，gamma三个角度数据。</p>

<p>alpha是围绕Z轴旋转的角度。数字范围[0, 360)。顺时针旋转时，数字变小，逆时针时数字变大。<br/>
beta是围绕X轴旋转的角度。数字范围[-180，180)。水平放置时是0，头部抬起时，数字变大，垂直时是90度。继续旋转时继续变大，直到屏幕朝下，接近180度。
而iOS中beta范围是[-90，90]，垂直时同样90度。区别在继续旋转时，数字变小了。即iOS中beta始终是锐角。</p>

<p>gamma是围绕Y轴旋转的角度。数字范围[-90，90)。机身左侧抬起时数字变大，屏幕朝右的垂直放置时为90度。
而iOS是[-180，180]。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows 2008 + IIS7 + IE10的奇怪Bug]]></title>
    <link href="http://fjzhou.github.io/blog/2014/05/19/iis-ie10-bug/"/>
    <updated>2014-05-19T00:00:00+08:00</updated>
    <id>http://fjzhou.github.io/blog/2014/05/19/iis-ie10-bug</id>
    <content type="html"><![CDATA[<p>Windows 2008 + IIS7环境下，如果恰好客户端是IE10，那么ASP.NET会不认识这个浏览器。
最终生成的页面中Session的处理和PostBack都会不正常。这个Bug微软已经确认。
<a href="http://support.microsoft.com/kb/2600100/zh-cn">KB2600100</a>，
<a href="http://support.microsoft.com/kb/2608565">KB2608565</a>和
<a href="http://support.microsoft.com/kb/2600088">KB2600088</a>。除了补丁程序之外，如果是临时为
某个站点修复，则可以使用以下方法。在根目录下的<code>App_Browsers</code>目录下，新建一个<code>IE10Fix.browser</code>文件。
内容：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;browsers&gt;</span>
</span><span class='line'>  <span class="nt">&lt;browser</span> <span class="na">refID=</span><span class="s">&quot;Default&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;capabilities&gt;</span><span class="c">&lt;!-- To avoid wrong detections of e.g. IE10 --&gt;</span>
</span><span class='line'>      <span class="nt">&lt;capability</span> <span class="na">name=</span><span class="s">&quot;cookies&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;capability</span> <span class="na">name=</span><span class="s">&quot;ecmascriptversion&quot;</span> <span class="na">value=</span><span class="s">&quot;3.0&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/capabilities&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/browser&gt;</span>
</span><span class='line'><span class="nt">&lt;/browsers&gt;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[配置双机SolrCloud]]></title>
    <link href="http://fjzhou.github.io/blog/2014/01/04/solrcloud-config/"/>
    <updated>2014-01-04T00:00:00+08:00</updated>
    <id>http://fjzhou.github.io/blog/2014/01/04/solrcloud-config</id>
    <content type="html"><![CDATA[<ol>
<li>物理环境：两台服务器，CentOS，分别是10.0.2.4和10.0.2.6。已经安装了Jetty和Solr。</li>
<li>下载安装ZooKeeper到/usr/local/zookeeper。</li>
<li>复制/usr/local/zookeeper/conf/zoo_example.cfg为zoo.cfg，修改其中的dataDir，默认是临时目录。启动ZooKeeper.</li>
<li>因为默认会使用第一个网卡的地址为基地址，如果Solr使用的网卡不是第一块网卡，则需要修改/usr/local/solr/example/solr/solr.xml。
根据环境这里修改其中的&lt;SolrCloud&gt;中的host为<code>${host:10.0.2.4}</code>。</li>
<li>然后修改其中一台jetty中的start.ini。加入以下参数：</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 定义分片的个数</span>
</span><span class='line'>-DnumShards<span class="o">=</span>2
</span><span class='line'><span class="c"># 因为是Jetty方式部署，所以不是默认的端口</span>
</span><span class='line'>-Djetty.port<span class="o">=</span>8080
</span><span class='line'><span class="c"># 配置路径</span>
</span><span class='line'>-Dbootstrap_confdir<span class="o">=</span>/usr/local/solr/example/solr/collection1/conf
</span><span class='line'><span class="c"># 配置名称</span>
</span><span class='line'>-Dcollection.configName<span class="o">=</span>myconf
</span><span class='line'><span class="c"># ZooKeeper连接</span>
</span><span class='line'>-DzkHost<span class="o">=</span>10.0.2.4:2181
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>上面这是第一个节点的配置，其他Node的配置简单的多：</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>-Djetty.port<span class="o">=</span>8080
</span><span class='line'>-DzkHost<span class="o">=</span>10.0.2.4:2181
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Jetty环境配置Solr和中文分词]]></title>
    <link href="http://fjzhou.github.io/blog/2013/12/26/solr-config/"/>
    <updated>2013-12-26T00:00:00+08:00</updated>
    <id>http://fjzhou.github.io/blog/2013/12/26/solr-config</id>
    <content type="html"><![CDATA[<ol>
<li>Java环境</li>
<li>下载、解压缩Solr和Jetty。假设路径是<code>/usr/local/jetty</code>和<code>/usr/local/solr</code></li>
<li>此时可以直接 <code>java -jar /usr/local/solr/example/start.jar</code>运行嵌入的简约版Jetty进行测试</li>
<li>复制<code>/usr/local/solr/example/lib/ext</code>里的jar到<code>/usr/local/jetty/lib/ext</code></li>
<li>复制<code>/usr/local/solr/example/webapps/solr.war</code>到<code>/usr/local/jetty/webapps</code>（可以解压缩，低版本Jetty上不解压缩有可能有奇葩bug)</li>
<li>在Jetty的start.ini中增加 <code>-Dsolr.solr.home=/usr/local/solr/example/solr</code></li>
<li>执行 <code>java -jar /usr/local/jetty/start.jar</code></li>
</ol>


<h3>IKAnalyzer中文分词的配置</h3>

<ol>
<li>这里下载支持Solr4.0的2012版，因为Solr4开始改变了一部分接口，所以2012以前的有点兼容性问题</li>
<li>复制IKAnalyzer.jar和stopword.dic到<code>/usr/local/solr/example/solr/lib</code></li>
<li><code>/usr/local/solr/example/solr/collection1/conf/solrconfig.xml</code>中增加:</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;lib</span> <span class="na">path=</span><span class="s">&quot;/usr/local/solr/example/solr/lib/IKAnalyzer.jar&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>然后可以在<code>Schema.xml</code>中使用了：</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;fieldType</span> <span class="na">name=</span><span class="s">&quot;text_ik&quot;</span> <span class="na">class=</span><span class="s">&quot;solr.TextField&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;analyzer</span> <span class="na">type=</span><span class="s">&quot;index&quot;</span> <span class="na">class=</span><span class="s">&quot;org.wltea.analyzer.lucene.IKAnalyzer&quot;</span> <span class="na">isMaxWordLength=</span><span class="s">&quot;false&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;analyzer</span> <span class="na">type=</span><span class="s">&quot;query&quot;</span> <span class="na">class=</span><span class="s">&quot;org.wltea.analyzer.lucene.IKAnalyzer&quot;</span> <span class="na">isMaxWordLength=</span><span class="s">&quot;true&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/fieldType&gt;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LTE频段]]></title>
    <link href="http://fjzhou.github.io/blog/2013/12/05/lte-band/"/>
    <updated>2013-12-05T00:00:00+08:00</updated>
    <id>http://fjzhou.github.io/blog/2013/12/05/lte-band</id>
    <content type="html"><![CDATA[<p>LTE TDD牌照发布，整理一下LTE各个频段，以后买手机做个参考</p>

<!--more-->




<table class="dataTable">
    <thead>
        <tr>
            <th>Band</th>
            <th>上行(MHz)</th>
            <th>下行(MHz)</th>
            <th>模式</th>
            <th>运营商</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>1</td>
            <td>1920-1980</td>
            <td>2110-2170</td>
            <td>FDD</td>
            <td></td>
        </tr>
        <tr>
            <td>2</td>
            <td>1850-1910</td>
            <td>1930-1990</td>
            <td>FDD</td>
            <td></td>
        </tr>
        <tr>
            <td>3</td>
            <td>1710-1785</td>
            <td>1805-1880</td>
            <td>FDD</td>
            <td></td>
        </tr>
        <tr>
            <td>4</td>
            <td>1710-1755</td>
            <td>2110-2155</td>
            <td>FDD</td>
            <td></td>
        </tr>
        <tr>
            <td>5</td>
            <td>824-849</td>
            <td>869-894</td>
            <td>FDD</td>
            <td></td>
        </tr>
        <tr>
            <td>6</td>
            <td>830-840</td>
            <td>865-875</td>
            <td>FDD</td>
            <td></td>
        </tr>
        <tr>
            <td>7</td>
            <td>2500-2570</td>
            <td>2620-2690</td>
            <td>FDD</td>
            <td></td>
        </tr>
        <tr>
            <td>8</td>
            <td>880-915</td>
            <td>925-960</td>
            <td>FDD</td>
            <td></td>
        </tr>
        <tr>
            <td>9</td>
            <td>1749.9-1784.9</td>
            <td>1844.9-1879.9</td>
            <td>FDD</td>
            <td></td>
        </tr>
        <tr>
            <td>10</td>
            <td>1710-1770</td>
            <td>2110-2170</td>
            <td>FDD</td>
            <td></td>
        </tr>
        <tr>
            <td>11</td>
            <td>1427.9-1447.9</td>
            <td>1475.9-1495.9</td>
            <td>FDD</td>
            <td></td>
        </tr>
        <tr>
            <td>12</td>
            <td>698-716</td>
            <td>728-746</td>
            <td>FDD</td>
            <td></td>
        </tr>
        <tr>
            <td>13</td>
            <td>777-787</td>
            <td>746-756</td>
            <td>FDD</td>
            <td></td>
        </tr>
        <tr>
            <td>14</td>
            <td>788-798</td>
            <td>758-768</td>
            <td>FDD</td>
            <td></td>
        </tr>
        <tr>
            <td>15</td>
            <td>1900-1920</td>
            <td>2600-2620</td>
            <td></td>
            <td></td>
        </tr>
        <tr>
            <td>16</td>
            <td>2010-2025</td>
            <td>2585-2600</td>
            <td></td>
            <td></td>
        </tr>
        <tr>
            <td>17</td>
            <td>704-716</td>
            <td>734-746</td>
            <td>FDD</td>
            <td></td>
        </tr>
        <tr>
            <td>18</td>
            <td>815-830</td>
            <td>860-875</td>
            <td>FDD</td>
            <td></td>
        </tr>
        <tr>
            <td>19</td>
            <td>830-845</td>
            <td>875-890</td>
            <td>FDD</td>
            <td></td>
        </tr>
        <tr>
            <td>20</td>
            <td>832-862</td>
            <td>791-821</td>
            <td>FDD</td>
            <td></td>
        </tr>
        <tr>
            <td>21</td>
            <td>1447.9-1462.9</td>
            <td>1495.9-1510.9</td>
            <td>FDD</td>
            <td></td>
        </tr>
        <tr>
            <td>22</td>
            <td>3410 3500</td>
            <td>3510-3600</td>
            <td>FDD</td>
            <td></td>
        </tr>
        <tr>
            <td>23</td>
            <td>2000-2020</td>
            <td>2180-2200</td>
            <td></td>
            <td></td>
        </tr>
        <tr>
            <td>24</td>
            <td>1625.5-1660.5</td>
            <td>1525-1559</td>
            <td></td>
            <td></td>
        </tr>
        <tr>
            <td>25</td>
            <td>1850-1915</td>
            <td>1930-1995</td>
            <td></td>
            <td></td>
        </tr>
        <tr>
            <td>26</td>
            <td>814-849</td>
            <td>859-894</td>
            <td></td>
            <td></td>
        </tr>
        <tr>
            <td>27</td>
            <td>807-824</td>
            <td>852-869</td>
            <td></td>
            <td></td>
        </tr>
        <tr>
            <td>28</td>
            <td>703-748</td>
            <td>758-803</td>
            <td></td>
            <td></td>
        </tr>
        <tr>
            <td>29</td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
        </tr>
        <tr>
            <td>30</td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
        </tr>
        <tr>
            <td>31</td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
        </tr>
        <tr>
            <td>32</td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
        </tr>
        <tr>
            <td>33</td>
            <td>1900-1920</td>
            <td>1900-1920</td>
            <td>TDD</td>
            <td></td>
        </tr>
        <tr>
            <td>34</td>
            <td>2010-2025</td>
            <td>2010-2025</td>
            <td>TDD</td>
            <td></td>
        </tr>
        <tr>
            <td>35</td>
            <td>1850-1910</td>
            <td>1850-1910</td>
            <td>TDD</td>
            <td></td>
        </tr>
        <tr>
            <td>36</td>
            <td>1930-1990</td>
            <td>1930-1990</td>
            <td>TDD</td>
            <td></td>
        </tr>
        <tr>
            <td>37</td>
            <td>1910-1930</td>
            <td>1910-1930</td>
            <td>TDD</td>
            <td></td>
        </tr>
        <tr>
            <td>38</td>
            <td>2570-2620</td>
            <td>2570-2620</td>
            <td>TDD</td>
            <td>移动(2575-2635)</td>
        </tr>
        <tr>
            <td>39</td>
            <td>1880-1920</td>
            <td>1880-1920</td>
            <td>TDD</td>
            <td>移动(1880-1900)</td>
        </tr>
        <tr>
            <td>40</td>
            <td>2300-2400</td>
            <td>2300-2400</td>
            <td>TDD</td>
            <td>联通(2300-2320)<br />移动(2320-2370)<br />电信(2370-2390)</td>
        </tr>
        <tr>
            <td>41</td>
            <td>2496-2690</td>
            <td>2496-2690</td>
            <td>TDD</td>
            <td>联通(2555-2575)<br />移动(2575-2635，即Band38)<br />电信(2635-2655)</td>
        </tr>
        <tr>
            <td>42</td>
            <td>3400-3600</td>
            <td>3400-3600</td>
            <td>TDD</td>
            <td></td>
        </tr>
        <tr>
            <td>43</td>
            <td>3600-3800</td>
            <td>3600-3800</td>
            <td>TDD</td>
            <td></td>
        </tr>
    </tbody>
</table>


<p>最新的设备列表：
1. iPad Air/iPad Mini with Retina: Bands 1,2,3,4,5,7,8,13,17,18,19,20,25,26<br/>
2. iPhone 5S/C (A1530): Bands 1,2,3,5,7,8,20,38,39,40<br/>
2. iPhone 5S/C (A1453): Bands 1,2,3,4,5,8,13,17,18,19,20,25,26<br/>
4. Nexus 5 (North America): Bands 1,2,4,5,17,19,25,26,41<br/>
5. Nexus 5 (Rest of World): Bands 1,3,5,7,8,20<br/>
6. Samsung S4 with LTE: Bands 1,3,5,7,8,20<br/>
7. Samsung Note 3: Bands 1,3,5,7,8,20</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开源协议整理]]></title>
    <link href="http://fjzhou.github.io/blog/2013/11/16/open-source-license/"/>
    <updated>2013-11-16T00:00:00+08:00</updated>
    <id>http://fjzhou.github.io/blog/2013/11/16/open-source-license</id>
    <content type="html"><![CDATA[<p>使用开源软件的几个方式：<br/>
1. 如果软件可以独立运行，则以可执行程序的方式使用<br/>
2. 如果软件是library，则以引用链接的方式使用<br/>
3. 修改软件，自己使用<br/>
4. 修改软件后发布</p>

<!--more-->




<table class="dataTable">
    <thead>
        <tr>
            <th>协议</th>
            <th>链接</th>
            <th>修改</th>
            <th>分发</th>
            <th>商业闭源</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>Public Domain</td>
            <td>允许</td>
            <td>允许</td>
            <td>允许</td>
            <td>公共领域软件，基本没有任何使用上的限制。比如<a href="http://sqlite.org/copyright.html" target="_blank">SQLite</a></td>
        </tr>
        <tr>
            <td><a href="http://opensource.org/licenses/gpl-license" target="_blank">GPL</a></td>
            <td>只能被GPL软件链接使用（传染性）</td>
            <td>GPL保护</td>
            <td>以GPL分发</td>
            <td>不允许。ASP漏洞参见下面的AGPL</td>
        </tr>
        <tr>
            <td><a href="http://opensource.org/licenses/lgpl-license" target="_blank">LGPL</a>（GPL的缩减版）</td>
            <td>允许被其他协议的软件链接</td>
            <td>LGPL保护</td>
            <td>以LGPL分发</td>
            <td>建议使用动态链接。因为静态链接是否属于软件衍生品有争议。这个协议专门提供给程序库使用，避免因为使用程序库而使得整个程序变成GPL的。例如<a href="http://log4cpp.sourceforge.net/#license" target="_blank">Log4Cpp</a>。</td>
        </tr>
        <tr>
            <td><a href="http://opensource.org/licenses/AGPL-3.0" target="_blank">AGPL</a>（GPL的补充）</td>
            <td>AGPL</td>
            <td>AGPL</td>
            <td>AGPL</td>
            <td>不允许。为了弥补GPL的漏洞而出现。以Google为代表的网络提供者使用GPL软件，但是不分发，仅在服务端使用对外提供服务，造成事实上的商业使用而不开源。AGPL规定即使在这种情况下也需要提供代码下载。使用AGPL的其中一个例子是<a href="http://www.mongodb.org/about/licensing" target="_blank">MongoDB</a>。</td>
        </tr>
        <tr>
            <td><a href="http://opensource.org/licenses/BSD-2-Clause" target="_blank">Simplified BSD</a></td>
            <td>允许</td>
            <td>允许</td>
            <td>允许</td>
            <td>允许。但是要附上原软件的License</td>
        </tr>
        <tr>
            <td><a href="http://opensource.org/licenses/MIT" target="blank">MIT</a></td>
            <td>允许</td>
            <td>允许</td>
            <td>允许</td>
            <td>允许。但是要附上原软件的License</td>
        </tr>
        <tr>
            <td><a href="http://opensource.org/licenses/Apache-2.0" target="_blank">Apache</a></td>
            <td>允许</td>
            <td>允许。每个修改的文件都要带Apache License</td>
            <td>允许。每个修改的文件都要带Apache License</td>
            <td>允许。但是要附上原软件的License</td>
        </tr>
    </tbody>
</table>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Outlook的客户端配置参数]]></title>
    <link href="http://fjzhou.github.io/blog/2013/09/13/outlook-imap/"/>
    <updated>2013-09-13T00:00:00+08:00</updated>
    <id>http://fjzhou.github.io/blog/2013/09/13/outlook-imap</id>
    <content type="html"><![CDATA[<p>Exchange ActiveSync协议配置：<br />
服务器地址：s.outlook.com <br />
域名：留空<br />
TLS/SSL加密：是</p>

<p>IMAP : <br />
地址：imap-mail.outlook.com<br />
端口：993<br />
SSL启用：是</p>

<p>SMTP：<br />
地址：smtp-mail.outlook.com<br />
端口：587<br />
SSL启用：是</p>
]]></content>
  </entry>
  
</feed>
